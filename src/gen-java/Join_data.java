/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Join_data implements org.apache.thrift.TBase<Join_data, Join_data._Fields>, java.io.Serializable, Cloneable, Comparable<Join_data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Join_data");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FINGER_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fingerTable", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField SUCCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("successor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PREDECESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("predecessor", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Join_dataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Join_dataTupleSchemeFactory());
  }

  public int id; // required
  public Map<Integer,Node> fingerTable; // required
  public Node successor; // required
  public Node predecessor; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FINGER_TABLE((short)2, "fingerTable"),
    SUCCESSOR((short)3, "successor"),
    PREDECESSOR((short)4, "predecessor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FINGER_TABLE
          return FINGER_TABLE;
        case 3: // SUCCESSOR
          return SUCCESSOR;
        case 4: // PREDECESSOR
          return PREDECESSOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINGER_TABLE, new org.apache.thrift.meta_data.FieldMetaData("fingerTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class))));
    tmpMap.put(_Fields.SUCCESSOR, new org.apache.thrift.meta_data.FieldMetaData("successor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.PREDECESSOR, new org.apache.thrift.meta_data.FieldMetaData("predecessor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Join_data.class, metaDataMap);
  }

  public Join_data() {
  }

  public Join_data(
    int id,
    Map<Integer,Node> fingerTable,
    Node successor,
    Node predecessor)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.fingerTable = fingerTable;
    this.successor = successor;
    this.predecessor = predecessor;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Join_data(Join_data other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFingerTable()) {
      Map<Integer,Node> __this__fingerTable = new HashMap<Integer,Node>(other.fingerTable.size());
      for (Map.Entry<Integer, Node> other_element : other.fingerTable.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Node other_element_value = other_element.getValue();

        Integer __this__fingerTable_copy_key = other_element_key;

        Node __this__fingerTable_copy_value = new Node(other_element_value);

        __this__fingerTable.put(__this__fingerTable_copy_key, __this__fingerTable_copy_value);
      }
      this.fingerTable = __this__fingerTable;
    }
    if (other.isSetSuccessor()) {
      this.successor = new Node(other.successor);
    }
    if (other.isSetPredecessor()) {
      this.predecessor = new Node(other.predecessor);
    }
  }

  public Join_data deepCopy() {
    return new Join_data(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.fingerTable = null;
    this.successor = null;
    this.predecessor = null;
  }

  public int getId() {
    return this.id;
  }

  public Join_data setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getFingerTableSize() {
    return (this.fingerTable == null) ? 0 : this.fingerTable.size();
  }

  public void putToFingerTable(int key, Node val) {
    if (this.fingerTable == null) {
      this.fingerTable = new HashMap<Integer,Node>();
    }
    this.fingerTable.put(key, val);
  }

  public Map<Integer,Node> getFingerTable() {
    return this.fingerTable;
  }

  public Join_data setFingerTable(Map<Integer,Node> fingerTable) {
    this.fingerTable = fingerTable;
    return this;
  }

  public void unsetFingerTable() {
    this.fingerTable = null;
  }

  /** Returns true if field fingerTable is set (has been assigned a value) and false otherwise */
  public boolean isSetFingerTable() {
    return this.fingerTable != null;
  }

  public void setFingerTableIsSet(boolean value) {
    if (!value) {
      this.fingerTable = null;
    }
  }

  public Node getSuccessor() {
    return this.successor;
  }

  public Join_data setSuccessor(Node successor) {
    this.successor = successor;
    return this;
  }

  public void unsetSuccessor() {
    this.successor = null;
  }

  /** Returns true if field successor is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessor() {
    return this.successor != null;
  }

  public void setSuccessorIsSet(boolean value) {
    if (!value) {
      this.successor = null;
    }
  }

  public Node getPredecessor() {
    return this.predecessor;
  }

  public Join_data setPredecessor(Node predecessor) {
    this.predecessor = predecessor;
    return this;
  }

  public void unsetPredecessor() {
    this.predecessor = null;
  }

  /** Returns true if field predecessor is set (has been assigned a value) and false otherwise */
  public boolean isSetPredecessor() {
    return this.predecessor != null;
  }

  public void setPredecessorIsSet(boolean value) {
    if (!value) {
      this.predecessor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FINGER_TABLE:
      if (value == null) {
        unsetFingerTable();
      } else {
        setFingerTable((Map<Integer,Node>)value);
      }
      break;

    case SUCCESSOR:
      if (value == null) {
        unsetSuccessor();
      } else {
        setSuccessor((Node)value);
      }
      break;

    case PREDECESSOR:
      if (value == null) {
        unsetPredecessor();
      } else {
        setPredecessor((Node)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case FINGER_TABLE:
      return getFingerTable();

    case SUCCESSOR:
      return getSuccessor();

    case PREDECESSOR:
      return getPredecessor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FINGER_TABLE:
      return isSetFingerTable();
    case SUCCESSOR:
      return isSetSuccessor();
    case PREDECESSOR:
      return isSetPredecessor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Join_data)
      return this.equals((Join_data)that);
    return false;
  }

  public boolean equals(Join_data that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fingerTable = true && this.isSetFingerTable();
    boolean that_present_fingerTable = true && that.isSetFingerTable();
    if (this_present_fingerTable || that_present_fingerTable) {
      if (!(this_present_fingerTable && that_present_fingerTable))
        return false;
      if (!this.fingerTable.equals(that.fingerTable))
        return false;
    }

    boolean this_present_successor = true && this.isSetSuccessor();
    boolean that_present_successor = true && that.isSetSuccessor();
    if (this_present_successor || that_present_successor) {
      if (!(this_present_successor && that_present_successor))
        return false;
      if (!this.successor.equals(that.successor))
        return false;
    }

    boolean this_present_predecessor = true && this.isSetPredecessor();
    boolean that_present_predecessor = true && that.isSetPredecessor();
    if (this_present_predecessor || that_present_predecessor) {
      if (!(this_present_predecessor && that_present_predecessor))
        return false;
      if (!this.predecessor.equals(that.predecessor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Join_data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFingerTable()).compareTo(other.isSetFingerTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFingerTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingerTable, other.fingerTable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessor()).compareTo(other.isSetSuccessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successor, other.successor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredecessor()).compareTo(other.isSetPredecessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredecessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predecessor, other.predecessor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Join_data(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fingerTable:");
    if (this.fingerTable == null) {
      sb.append("null");
    } else {
      sb.append(this.fingerTable);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successor:");
    if (this.successor == null) {
      sb.append("null");
    } else {
      sb.append(this.successor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predecessor:");
    if (this.predecessor == null) {
      sb.append("null");
    } else {
      sb.append(this.predecessor);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (successor != null) {
      successor.validate();
    }
    if (predecessor != null) {
      predecessor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Join_dataStandardSchemeFactory implements SchemeFactory {
    public Join_dataStandardScheme getScheme() {
      return new Join_dataStandardScheme();
    }
  }

  private static class Join_dataStandardScheme extends StandardScheme<Join_data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Join_data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINGER_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.fingerTable = new HashMap<Integer,Node>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  int _key2;
                  Node _val3;
                  _key2 = iprot.readI32();
                  _val3 = new Node();
                  _val3.read(iprot);
                  struct.fingerTable.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setFingerTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUCCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.successor = new Node();
              struct.successor.read(iprot);
              struct.setSuccessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREDECESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predecessor = new Node();
              struct.predecessor.read(iprot);
              struct.setPredecessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Join_data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.fingerTable != null) {
        oprot.writeFieldBegin(FINGER_TABLE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.fingerTable.size()));
          for (Map.Entry<Integer, Node> _iter4 : struct.fingerTable.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.successor != null) {
        oprot.writeFieldBegin(SUCCESSOR_FIELD_DESC);
        struct.successor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.predecessor != null) {
        oprot.writeFieldBegin(PREDECESSOR_FIELD_DESC);
        struct.predecessor.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Join_dataTupleSchemeFactory implements SchemeFactory {
    public Join_dataTupleScheme getScheme() {
      return new Join_dataTupleScheme();
    }
  }

  private static class Join_dataTupleScheme extends TupleScheme<Join_data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Join_data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFingerTable()) {
        optionals.set(1);
      }
      if (struct.isSetSuccessor()) {
        optionals.set(2);
      }
      if (struct.isSetPredecessor()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFingerTable()) {
        {
          oprot.writeI32(struct.fingerTable.size());
          for (Map.Entry<Integer, Node> _iter5 : struct.fingerTable.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSuccessor()) {
        struct.successor.write(oprot);
      }
      if (struct.isSetPredecessor()) {
        struct.predecessor.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Join_data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fingerTable = new HashMap<Integer,Node>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            int _key8;
            Node _val9;
            _key8 = iprot.readI32();
            _val9 = new Node();
            _val9.read(iprot);
            struct.fingerTable.put(_key8, _val9);
          }
        }
        struct.setFingerTableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.successor = new Node();
        struct.successor.read(iprot);
        struct.setSuccessorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.predecessor = new Node();
        struct.predecessor.read(iprot);
        struct.setPredecessorIsSet(true);
      }
    }
  }

}

